HW3 Due 11:59PM November 8

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

1. What are the 3Cs of User Stories?

The "3Cs" of User Stories--Card, Conversation, and Confirmation--were introduced by Ron Jeffries, a prominent advocate for Agile development practices like Test-Driven Development (TDD). Jeffries developed the 3Cs as a guideline to help teams create, understand, and implement user stories effectively, ensuring a strong alignment between business needs and development efforts.

Card refers to a brief description of the user story, often written on an index card or a digital equivalent. This card serves as a placeholder for a feature or functionality and typically includes a short description, outlining what the feature should accomplish from the user's perspective. The card's simplicity keeps the focus on essential details, allowing for easy prioritization and adaptation within the Agile process.

Conversation highlights the collaborative discussions between the development team, product owner, and stakeholders. This conversation clarifies the requirements, expectations, and details of the user story, ensuring that everyone understands what's needed. As Ron Jeffries emphasized, the interaction here is crucial for refining the user story, as it allows the team to explore multiple perspectives, identify edge cases, and incorporate necessary adjustments. Test-Driven Development (TDD) often enters this phase, as developers start thinking about how they'll validate and test the feature, sometimes defining acceptance criteria as tests before actual implementation begins.

Confirmation is the set of acceptance criteria that determine when a user story is complete and functioning as expected. These criteria specify the conditions required for the story to be considered done and are often defined as test cases. TDD plays an important role here, as the acceptance criteria are typically written as tests. This allows the development team to use TDD principles to verify each criterion through automated tests, ensuring that the feature meets the expectations and passes all necessary checks. Confirmation provides a clear, testable benchmark for quality and functionality, helping to maintain alignment with the user's needs.

Together, the 3Cs--Card, Conversation, and Confirmation--serve as a structured approach for managing user stories, fostering communication, and integrating quality practices like Test-Driven Development.


2. Provide examples of where we used each of the 3Cs in this class.

Card: In our assignments, each task or requirement loosely served as the "Card" aspect, though we didn't formally create user stories in a standardized format. The "Card" was more implicit, embedded within the task descriptions we received. For example, in the Mastermind game assignment, we were given an overview of the primary goal: to implement a color-matching game with specific rules and constraints. This description outlined the main task without delving into extensive detail, much like an Agile user story might, but without the formal structure.

Similarly, in the airport assignment, we were broadly directed to implement functionality for parsing airport data and applying sorting criteria, which let us decide on design details ourselves. Rather than following a formal user story format, the assignments provided implicit goals that allowed flexibility in how we approached each task. This approach allowed us to focus on core objectives while still exploring different ways to meet the requirements, aligning with the spirit of user stories without a strict adherence to formal card writing.

We engaged in "Conversation" through discussions with the professor and classmates, which helped us clarify requirements and expectations for our projects. For instance, during the process_text.py assignment, the professor gave feedback about handling hardcoded words like "blah" and suggested improvements for our approach. These conversations were vital in refining our implementation and resolving ambiguities. We also had an in-depth discussion regarding the word "there" and how it should be represented. Analogies like ordering a burger and being served a pizza helped us understand the problem and address it effectively, mirroring the iterative and interactive aspects of Agile methodologies.

In the Mastermind game assignment, conversations with the professor clarified core requirements, such as handling specific edge cases and ensuring the game logic was correctly implemented while making the GUI user-friendly. Similarly, during the airport assignment, we emailed the professor to clarify specific requirements, such as the uppercase test for airport names. This email exchange provided crucial clarity and ensured we approached that part of the assignment correctly.

Additionally, peer discussions played an important role in refining our designs. We debated whether to use the Factory Method pattern in the airport assignment and discussed how to handle mixed-up temperature and delay values in the parsed data. These ongoing interactions weren't just focused on technical implementation; we often reflected on how our decisions impacted the end user, considering factors like clarity of information and ease of navigation within the application. Through these conversations, we ensured that our solutions aligned with user-centered goals, keeping the bigger picture in mind.

Confirmation: The "Confirmation" component was represented by the specific testing and feedback requirements outlined in our assignments. For instance, in the airport assignment, we had clear acceptance criteria, including testing different sorting options and ensuring uppercase output for airport names. These criteria acted as benchmarks for completion, defining when our work was considered satisfactory and allowing us to verify that our code met all necessary requirements through tests. Additionally, in the Mastermind assignment, we used acceptance tests to verify correct feedback responses for user guesses, ensuring the solution adhered to the game's rules and constraints. This emphasis on confirmation reflects Agile practices and Test-Driven Development, where acceptance criteria are defined in advance to validate functionality accurately, allowing us to know when our implementations met the established requirements.

Throughout the course, we relied more heavily on Conversation and Confirmation over Card. While the assignment descriptions provided a high-level overview, we often needed clarification and iterative feedback through discussions with the professor and our peers. This need for clarification and alignment on requirements led to extensive conversations, as seen in the airport and process_text assignments. At the same time, each assignment emphasized Confirmation through clearly defined acceptance criteria, guiding us in verifying our solutions and confirming that they met all necessary standards. This strong focus on communication and testing aligns with Agile values, underscoring the importance of clear requirements and thorough validation in achieving successful outcomes.


Total [10]: 10
