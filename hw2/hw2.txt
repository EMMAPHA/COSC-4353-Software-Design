HW2 Due 11:59PM September 13

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Master Mind game.

Let's first discuss the version of the game that we'll design. We'll not be writing any code in this homework, but only create an initial strategic design.

The object of the game is for the user to guess the colors the program has chosen. The program chooses six distinct colors from among ten colors. The user obviously does not know the colors the program has chosen.

The operations user can perform and the outcome:

User picks six colors:
The program displays a color code back to indicate the progress the user has made. 

If the user guessed the exact color combination, including the positions, the result is six black colors. The game ends now with a message that the user has won and the program reveals the color selected.

If the user guessed only some colors, then the result has as many black colors as the number of direct positions matches and as many silver colors for each match that is in an incorrect position.

For example, if the program selected green, red, blue, white, orange, purple, and the user entered cyan, yellow, blue, orange, violet, red, then the program will display black, silver, silver.

User gives up: 
The program displays the colors selected, game ends with a message the user has lost.

User has made 20 tries:
The program displays the colors selected, game ends with a message the user has lost (unless in the last try the user found the combination).



Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

1) How would you design this program? 
 
To start designing this program, we first thought about the main components of the Master Mind game. In this case, we identified three key elements: the game logic, user input for color guesses, and the feedback mechanism. To handle these components efficiently, we divided the program into two main parts: the core game logic, responsible for handling guesses and determining results, and the GUI, which will focus on displaying the game state and feedback to the user.

For the game logic, we decided on a class named "MasterMindGameLogic". This class would manage the selection of six distinct colors from a pool of ten, validate the user's guesses, and provide feedback on the number of correct colors in both correct and incorrect positions. It will also track the number of guesses the user has made and determine whether the game ends in a win, a loss, or if the user decides to give up. Using a single class to manage this logic keeps the design clean and avoids unnecessary complexity, ensuring that the focus remains on core functionality.

As for the UI, after further consideration, we have decided that a single UI class named "GameUI", is sufficient to handle all interactions with the user. This UI will manage both the input and output--specifically, allowing the user to enter color guesses and displaying the results (feedback on the guesses). The "GameUI" class will manage these tasks and will communicate directly with the "MasterMindGameLogic" class.
For the user interface (UI), we consolidated the design into a single class named "GameUI". This class will manage all aspects of user interaction, including collecting color guesses and displaying feedback. By using a single UI class, we streamline the design and simplify communication with the game logic. The "GameUI" class will be responsible for rendering the game board, receiving user input, and presenting feedback based on the results from the "MasterMindGameLogic" class.

"GameUI" will communicate with "MasterMindGameLogic" to retrieve game state information, such as whether a guess is correct or how many attempts remain. This approach ensures that the game logic and user interface are organized and modular, making it easier to maintain and update the design without affecting other parts of the program.

In the diagram, solid lines should be used instead of dotted lines to indicate association between the classes. This design involves association rather than aggregation, as "GameUI" interacts with "MasterMindGameLogic" but does not own or exclusively manage it. The open arrow is used to represent dependency, reflecting the direction of interaction between the classes.


2) Discuss what language you would use.

When considering the implementation of a Master Mind game, we can focus on selecting a platform that allows us to develop interactivity, provide clear feedback, and ensure a smooth user experience. We have the option to develop the game as a console application, a GUI-based program, or a web-based application.

A console application is a straightforward choice, ideal for focusing on core functionality but limited in terms of user interface and visual engagement. On the other hand, both GUI and web applications offer a more engaging, visually rich experience by providing intuitive layouts and color-coded feedback for user guesses. A web application can enhance accessibility across devices, while a GUI program strikes a balance between interactivity and visual appeal.

For this version of Master Mind, we are choosing Python due to its ease of development for a wide range of platforms. Python is particularly well-suited for quick prototyping, allowing us to rapidly iterate on game logic while focusing on the interactive aspects of the game. Moreover, Python's extensive libraries such as Tkinter for GUI development or Flask/Django for web applications make it easier to implement different versions of the game without having to switch languages. This versatility means we can start with a console-based version, then transition to a GUI or web application with minimal changes to the core logic.

We as a team are most familiar with Python, and while there are other languages that may be as good or even better for specific tasks, Python's readability, extensive libraries, and large community support make it an ideal choice for us. Python provides a more developer-friendly environment, reducing the amount of boilerplate code needed. Additionally, its robust community support ensures that any potential issues we face can be addressed efficiently, making Python the best choice for this project. Our familiarity ensures we can work more efficiently and deliver results faster.


3) How do you plan to structure the program, what libraries would you use?

To structure the Master Mind game effectively, we will separate the program into two main components: game logic and user interface. This modular approach ensures clarity and ease of maintenance.

The game logic component will manage the core functions, such as generating a secret color combination, validating user guesses, providing feedback on the correctness of guesses, and tracking the number of attempts. This component will be implemented in a dedicated class, which will keep the logic organized and distinct from the user interface.

For the user interface, we will use the tkinter library. Tkinter is a robust choice for building GUIs in Python, providing a straightforward way to create graphical elements like buttons, color palettes, and feedback displays. Tkinter will help us design the game board, handle user inputs, and show feedback for each guess. Its simplicity and integration with Python make it suitable for developing a basic yet functional interface for the Master Mind game.

To ensure the correctness of the game logic, we will use the pytest library for unit testing. Pytest offers a concise and readable format for writing tests, which helps us verify that the game logic functions as intended. Although Python's built-in unittest library is also an option, we prefer pytest for its ease of use and flexibility.

As for build tools, Python's interpretive nature means we do not need additional tools for compilation. Dependency management, including the installation of Tkinter and any other libraries, will be handled via pip, Python's package manager, which streamlines the setup process.

Total  [10]: 10
